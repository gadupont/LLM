import replicate
import requests
import json
import os
from dotenv import load_dotenv



# === 1. FONCTION POUR UPLOADER L‚ÄôIMAGE LOCALE SUR FILE.IO ===
def upload_image_to_fileio(image_path):
    with open(image_path, "rb") as file:
        response = requests.post("https://file.io", files={"file": file})
        
        try:
            data = response.json()
        except Exception as e:
            print("‚ùå Erreur de d√©codage JSON :", e)
            print("üîç Contenu brut de la r√©ponse :", response.text)
            raise

        if response.status_code == 200 and data.get("success"):
            return data["link"]
        else:
            print("‚ùå Upload √©chou√©. D√©tails :", data)
            raise Exception("Upload √©chou√©.")


# === 2. D√âFINITION DU PROMPT STRUCTUR√â POUR LE FORMAT DE VISITE CLINIQUE ===
prompt = (
    "Voici un tableau extrait d‚Äôun protocole clinique. Extrait et convertis les donn√©es en un objet JSON "
    "structur√© repr√©sentant les visites de l'√©tude. Chaque entr√©e du tableau doit √™tre convertie dans ce format :\n\n"
    "{\n"
    "  \"id\": <num√©ro entier unique et incr√©ment√© √† partir de 1>,\n"
    "  \"code\": <nom de la visite comme D1, D8, Screening, etc>,\n"
    "  \"description\": <texte court r√©sumant la visite avec le jour et sa tol√©rance>,\n"
    "  \"order\": <m√™me valeur que id>,\n"
    "  \"is_scheduled\": true si elle est planifi√©e, false si non,\n"
    "  \"anchor\": null si c'est la premi√®re visite (Screening), sinon l'id de la visite de r√©f√©rence,\n"
    "  \"expected_days\": <nombre de jours depuis la visite Screening>,\n"
    "  \"window_before\": <jours avant>,\n"
    "  \"window_after\": <jours apr√®s>\n"
    "}\n\n"
    "Toutes les visites doivent √™tre list√©es dans une seule cl√© 'visits'.\n"
    "R√©ponds uniquement avec un objet JSON valide, sans aucun texte explicatif ou commentaire.\n"
)

# === 3. IMAGE √Ä TRAITER ===
image_path = "./example_de_protocole/ex1/schedule.png"

# Upload de l‚Äôimage localement
print("üì§ Upload de l‚Äôimage en cours...")
image_url = upload_image_to_fileio(image_path)
print(f"‚úÖ Image upload√©e : {image_url}")

# === 4. APPEL √Ä LLAVA VIA REPLICATE ===
print("ü§ñ Envoi de la requ√™te √† LLaVA...")
output = replicate.run(
    "yorickvp/llava-13b:80537f9eead1a5bfa72d5ac6ea6414379be41d4d4f6679fd776e9535d1eb58bb",
    input={
        "image": image_url,
        "prompt": prompt,
        "temperature": 0.2,
        "top_p": 1,
        "max_tokens": 2000
    }
)

# === 5. R√âCUP√âRATION & SAUVEGARDE DU R√âSULTAT ===
full_output = ""
for item in output:
    full_output += str(item)

output_path = "./llava/output.json"
os.makedirs(os.path.dirname(output_path), exist_ok=True)
with open(output_path, "w") as f:
    f.write(full_output)

print(f"‚úÖ R√©sultat sauvegard√© dans : {output_path}")
